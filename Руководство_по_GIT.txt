Руководство по GIT

1. GIT имеет 3 директории:
	- Рабочая (Working Directory);
	- Область подготовленных файлов (Staging Area, Index);
	- Репозиторий (.git directory).

2. Для того, чтобы посмотреть свои настройки:
$ git config --list

3. Для установки глобального редактора:
$ git config --global core.editor nano

4. Для создания проекта:
$ cd /home/lyzv/work/prj/qt/ksu
$ git init

5. Клонирование репозитория:
$ git clone https://gitlab.com/LyzV/ksu.git

6. Файлы проекта могут быть:
	- неотслеживаемые (untracked)
	- не изменённые (unmodidied)
	- изменённые (modified)
	- подготовленные к коммиту (staged)

7. Определение состояния файлов проекта:
$ git status

8. Что-бы добавить файл README под версионный контроль:
$ git add README

9. Коротко и ясно определить статус файлов можно:
$ git status -s
	- ??(красным) неверсионные файлы
	- A(зелёным) новые файлы, добавленные в индекс
	- R(зелёным) переименованные файлы
	- M(красным) версионные изменённые и не добавленные в индекс
	- M(зелёным) версионные изменённые и добавленные в индекс
	- MM(зелёным,красным) версионные изменённые и добавленные в индекс, а затем опять изменённые
	- AM(зелёным,красным) новые файлы добавленные в индекс, а затем изменённые

10. Чтобы GIT игнорировал файлы и даже каталоги необходимо использовать .gitignore файл. В нём
    указать построчно шаблоны файлов для игнорирования:
*.[oa]
ksu_data/
*~

11. Чтобы посмотреть различия между файлами в рабочей директории и файлами в индексе:
$ git diff
	Покажет изменения во всех файлах. Если нужны изменения в конкретном файле README:
$ git diff README

12. Чтобы посмотреть различия между файлами в индексе (staged) и последним коммитом (репозитории):
$ git diff --staged
или
$ git diff --cached
	--staged и --cached - синонимы.

13. Чтобы выполнить коммит индекса:
$ git commit -m "Modifies file Руководство_по_GIT.txt"

14. Чтобы удалить файл README из индекса и из версионности:
$ git rm --cached README

15. Чтобы удалить целый каталог из индекса и из версионности:
$ git rm -r --cached folder/

16. Чтобы убрать файл file.txt из индекса:
$ git reset HEAD file.txt

17. Для просмотра коммитов:
$ git log

18. Для просмотра коммитов с показом разницы:
$ git log --patch

19. Для просмотра коммитов в одну строчку:
$ git log --pretty=oneline

20. Как изменить комментарий к последнему коммиту?
$ git commit --amend

21. Если необходимо вдогонок к коммиту добавить ещё один файл:
$ git commit -m "first commit"
$ git add some_else_file
$ git commit --amend

22. Как сбросить изменения в файле README до состояния последнего коммита?:
$ git checkout -- README

23. Чтобы посмотреть список удалённых репозиториев:
$ git remote
	или
$ git remote -v

24. Чтобы извлечь к себе содержимое удалённого репозитория:
$ git fetch origin
	Содержимое будет размещено в ветке remotes/origin/master
	Потом можно будет слить изменения из этой ветки в текущую коммандой:
$ git merge remotes/origin/master
	Или можно будет посмотреть все ветки удалённого репозитория:
$ git branch -a

25. Для того, чтобы извлечь данные из удалённого репозитория и сразу слить
    изменения в текущую ветку нужно выполнить:
$ git pull

26. Для того, чтобы опубликовать свои изменения в удалённом репозитории:
$ git push

27. Для отправки изменений конкретной ветки в конкретный удалённый репозиторий:
$ git push origin master
	Отправляет изменения ветки master в удалённый репозиторий origin

28. Для того, чтобы посмотреть подробнее удалённый репозиторий:
$ git remote show origin
	Команда покажет все опубликованные ветки, а так-же все привязки.

29. Git позволяет устанавливать дружественные метки - tags. Для их просмотра:
$ git tag
	При этом git отображает теги в алфавитном порядке.

30. Тэги бываю легковесными и аннотированными. Легковесный тэг - это просто ссылка на коммит.
	Аннотированные тэги содержат имя автора, комментарий и др.

31. Для создания аннотированного тэга:
$ git tag -a v13.1.10 -m "Первая версия для production"

32. Чтобы подробно посмотреть тэг:
$ git show v13.1.10
	При этом git покажет номер коммита, комментарий, кто и когда установил, различия с предыдущим коммитом.

33. Для того, чтобы задним числом пометить конкретный коммит тэгом:
$ git tag -a v13.1.10 <номер коммита>

34. git push не отправляет тэги в репозиторий. Чтобы отправить конкретный тэг:
$ git push origin v13.1.10

35. Чтобы отправить все тэги в удадённый репозиторий:
$ git push origin --tags

36. Чтобы удалить в логальном репозитории тег:
$ git tag -d v13.1.10

37. Чтобы удалить тег в удалённом репозитории:
$ git push origin --delete v13.1.10

38. Чтобы установить проект в состояние, соответствующее тэгу:
$ git checkout v13.1.10

39. Для того, чтобы продолжить развитие тэга v13.1.10 своим путём необходимо сделать ветку на 
    коммите на который указывает тэг:
$ git checkout v13.1.10 -b old_branch
	Всё, после этого у нас ветка old_branch, ответвлённая от тэга v13.1.10

40. Находясь на ветке master можно посмотреть все слитые ветки:
$ git branch --merged

